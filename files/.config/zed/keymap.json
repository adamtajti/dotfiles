// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // Standard Linux bindings
  {
    "bindings": {
      "ctrl-j": "menu::SelectNext",
      "ctrl-n": "menu::SelectNext",
      "ctrl-k": "menu::SelectPrevious",
      ", t": "workspace::ToggleBottomDock",

      "home": "menu::SelectFirst",
      "shift-pageup": "menu::SelectFirst",
      "pageup": "menu::SelectFirst",
      "end": "menu::SelectLast",
      "shift-pagedown": "menu::SelectLast",
      "pagedown": "menu::SelectLast",
      "tab": "menu::SelectNext",
      "ctrl-p": "menu::SelectPrevious",
      "shift-tab": "menu::SelectPrevious",
      "enter": "menu::Confirm",
      "ctrl-enter": "menu::SecondaryConfirm",
      "ctrl-escape": "menu::Cancel",
      "ctrl-c": "menu::Cancel",
      "escape": "menu::Cancel",
      "alt-shift-enter": "menu::Restart",
      "alt-enter": ["picker::ConfirmInput", { "secondary": false }],
      "ctrl-alt-enter": ["picker::ConfirmInput", { "secondary": true }],
      "ctrl-shift-w": "workspace::CloseWindow",
      "shift-escape": "workspace::ToggleZoom",
      "open": "workspace::Open",
      "ctrl-o": "workspace::Open",
      "ctrl-=": ["zed::IncreaseBufferFontSize", { "persist": false }],
      "ctrl-+": ["zed::IncreaseBufferFontSize", { "persist": false }],
      "ctrl--": ["zed::DecreaseBufferFontSize", { "persist": false }],
      "ctrl-0": ["zed::ResetBufferFontSize", { "persist": false }],
      "ctrl-,": "zed::OpenSettings",
      "ctrl-q": "zed::Quit",
      "f4": "debugger::Start",
      "f5": "debugger::Continue",
      "shift-f5": "debugger::Stop",
      "f6": "debugger::Pause",
      "f7": "debugger::StepOver",
      "cmd-f11": "debugger::StepInto",
      "shift-f11": "debugger::StepOut",
      "f11": "zed::ToggleFullScreen",
      "ctrl-alt-z": "edit_prediction::RateCompletions",
      "ctrl-shift-i": "edit_prediction::ToggleMenu"
    }
  },
  {
    "context": "Picker || menu",
    "bindings": {
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "escape": "editor::Cancel",
      "shift-backspace": "editor::Backspace",
      "backspace": "editor::Backspace",
      "delete": "editor::Delete",
      "tab": "editor::Tab",
      "shift-tab": "editor::Backtab",
      // "ctrl-t": "editor::Transpose",
      "ctrl-backspace": "editor::DeleteToPreviousWordStart",
      "ctrl-delete": "editor::DeleteToNextWordEnd",
      "cut": "editor::Cut",
      "shift-delete": "editor::Cut",
      "ctrl-x": "editor::Cut",
      "copy": "editor::Copy",
      "ctrl-insert": "editor::Copy",
      "ctrl-c": "editor::Copy",
      "paste": "editor::Paste",
      "shift-insert": "editor::Paste",
      "ctrl-v": "editor::Paste",
      "undo": "editor::Undo",
      "ctrl-z": "editor::Undo",
      "redo": "editor::Redo",
      "ctrl-y": "editor::Redo",
      "ctrl-shift-z": "editor::Redo",
      "up": "editor::MoveUp",
      "ctrl-up": "editor::LineUp",
      "ctrl-down": "editor::LineDown",
      "pageup": "editor::MovePageUp",
      "alt-pageup": "editor::PageUp",
      "shift-pageup": "editor::SelectPageUp",
      "home": [
        "editor::MoveToBeginningOfLine",
        { "stop_at_soft_wraps": true, "stop_at_indent": true }
      ],
      "down": "editor::MoveDown",
      "pagedown": "editor::MovePageDown",
      "alt-pagedown": "editor::PageDown",
      "shift-pagedown": "editor::SelectPageDown",
      "end": ["editor::MoveToEndOfLine", { "stop_at_soft_wraps": true }],
      "left": "editor::MoveLeft",
      "right": "editor::MoveRight",
      "ctrl-left": "editor::MoveToPreviousWordStart",
      "ctrl-right": "editor::MoveToNextWordEnd",
      "ctrl-home": "editor::MoveToBeginning",
      "ctrl-end": "editor::MoveToEnd",
      "shift-up": "editor::SelectUp",
      "shift-down": "editor::SelectDown",
      "shift-left": "editor::SelectLeft",
      "shift-right": "editor::SelectRight",
      "ctrl-shift-left": "editor::SelectToPreviousWordStart", // cursorWordLeftSelect
      "ctrl-shift-right": "editor::SelectToNextWordEnd", // cursorWordRightSelect
      "ctrl-shift-home": "editor::SelectToBeginning",
      "ctrl-shift-end": "editor::SelectToEnd",
      "ctrl-a": "editor::SelectAll",
      "ctrl-l": "editor::SelectLine",
      "ctrl-shift-i": "editor::Format",
      "alt-shift-o": "editor::OrganizeImports",
      // "cmd-shift-left": ["editor::SelectToBeginningOfLine", {"stop_at_soft_wraps": true, "stop_at_indent": true }],
      // "ctrl-shift-a": ["editor::SelectToBeginningOfLine", { "stop_at_soft_wraps": true, "stop_at_indent": true }],
      "shift-home": [
        "editor::SelectToBeginningOfLine",
        { "stop_at_soft_wraps": true, "stop_at_indent": true }
      ],
      // "cmd-shift-right": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
      // "ctrl-shift-e": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
      "shift-end": [
        "editor::SelectToEndOfLine",
        { "stop_at_soft_wraps": true }
      ],
      // "alt-v": ["editor::MovePageUp", { "center_cursor": true }],
      "ctrl-alt-space": "editor::ShowCharacterPalette",
      "ctrl-;": "editor::ToggleLineNumbers",
      "ctrl-'": "editor::ToggleSelectedDiffHunks",
      "ctrl-\"": "editor::ExpandAllDiffHunks",
      "ctrl-i": "editor::ShowSignatureHelp",
      "alt-g b": "editor::ToggleGitBlame",
      "menu": "editor::OpenContextMenu",
      "shift-f10": "editor::OpenContextMenu",
      "ctrl-shift-e": "editor::ToggleEditPrediction",
      "f9": "editor::ToggleBreakpoint",
      "shift-f9": "editor::EditLogBreakpoint",
      "ctrl-shift-backspace": "editor::GoToPreviousChange",
      "ctrl-shift-alt-backspace": "editor::GoToNextChange"
    }
  },
  {
    "context": "Editor && mode == full",
    "bindings": {
      "shift-enter": "editor::Newline",
      "enter": "editor::Newline",
      "ctrl-enter": "editor::NewlineAbove",
      "ctrl-shift-enter": "editor::NewlineBelow",
      "find": "buffer_search::Deploy",
      "ctrl-f": "buffer_search::Deploy",
      "ctrl-h": "buffer_search::DeployReplace",
      // "cmd-e": ["buffer_search::Deploy", { "focus": false }],
      "ctrl->": "assistant::QuoteSelection",
      "ctrl-<": "assistant::InsertIntoEditor",
      "ctrl-alt-e": "editor::SelectEnclosingSymbol",
      "alt-enter": "editor::OpenSelectionsInMultibuffer"
    }
  },
  {
    "context": "Editor && mode == full && edit_prediction",
    "bindings": {
      "alt-]": "editor::NextEditPrediction",
      "alt-[": "editor::PreviousEditPrediction",
      "alt-right": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Editor && !edit_prediction",
    "bindings": {
      "alt-\\": "editor::ShowEditPrediction"
    }
  },
  {
    "context": "Editor && mode == auto_height",
    "bindings": {
      "ctrl-enter": "editor::Newline",
      "shift-enter": "editor::Newline",
      "ctrl-shift-enter": "editor::NewlineBelow"
    }
  },
  {
    "context": "Markdown",
    "bindings": {
      "copy": "markdown::Copy",
      "ctrl-c": "markdown::Copy"
    }
  },
  {
    "context": "Editor && jupyter && !ContextEditor",
    "bindings": {
      "ctrl-shift-enter": "repl::Run",
      "ctrl-alt-enter": "repl::RunInPlace"
    }
  },
  {
    "context": "Editor && !agent_diff",
    "bindings": {
      "ctrl-alt-y": "git::ToggleStaged",
      "alt-y": "git::StageAndNext",
      "alt-shift-y": "git::UnstageAndNext"
    }
  },
  {
    "context": "Editor && editor_agent_diff",
    "bindings": {
      "ctrl-y": "agent::Keep",
      "ctrl-n": "agent::Reject",
      "ctrl-shift-y": "agent::KeepAll",
      "ctrl-shift-n": "agent::RejectAll",
      "shift-ctrl-r": "agent::OpenAgentDiff"
    }
  },
  {
    "context": "AgentDiff",
    "bindings": {
      "ctrl-y": "agent::Keep",
      "ctrl-n": "agent::Reject",
      "ctrl-shift-y": "agent::KeepAll",
      "ctrl-shift-n": "agent::RejectAll"
    }
  },
  {
    "context": "ContextEditor > Editor",
    "bindings": {
      "ctrl-enter": "assistant::Assist",
      "ctrl-shift-enter": "assistant::Edit",
      "ctrl-s": "workspace::Save",
      "save": "workspace::Save",
      "ctrl->": "assistant::QuoteSelection",
      "ctrl-<": "assistant::InsertIntoEditor",
      "shift-enter": "assistant::Split",
      "ctrl-r": "assistant::CycleMessageRole",
      "enter": "assistant::ConfirmCommand",
      "alt-enter": "editor::Newline",
      "ctrl-g": "search::SelectNextMatch",
      "ctrl-shift-g": "search::SelectPreviousMatch"
    }
  },
  {
    "context": "AgentPanel",
    "bindings": {
      "ctrl-n": "agent::NewThread",
      "ctrl-alt-n": "agent::NewTextThread",
      "ctrl-shift-h": "agent::OpenHistory",
      "ctrl-alt-c": "agent::OpenConfiguration",
      "ctrl-alt-p": "agent::OpenRulesLibrary",
      "ctrl-i": "agent::ToggleProfileSelector",
      "ctrl-alt-/": "agent::ToggleModelSelector",
      "ctrl-shift-a": "agent::ToggleContextPicker",
      "ctrl-shift-o": "agent::ToggleNavigationMenu",
      "ctrl-shift-i": "agent::ToggleOptionsMenu",
      "shift-alt-escape": "agent::ExpandMessageEditor",
      "ctrl-alt-e": "agent::RemoveAllContext",
      "ctrl-shift-e": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "AgentPanel > NavigationMenu",
    "bindings": {
      "shift-backspace": "agent::DeleteRecentlyOpenThread"
    }
  },
  {
    "context": "AgentPanel > Markdown",
    "bindings": {
      "copy": "markdown::CopyAsMarkdown",
      "ctrl-c": "markdown::CopyAsMarkdown"
    }
  },
  {
    "context": "AgentPanel && prompt_editor",
    "bindings": {
      "cmd-n": "agent::NewTextThread",
      "cmd-alt-t": "agent::NewThread"
    }
  },
  {
    "context": "MessageEditor > Editor",
    "bindings": {
      "enter": "agent::Chat",
      "ctrl-i": "agent::ToggleProfileSelector",
      "shift-ctrl-r": "agent::OpenAgentDiff"
    }
  },
  {
    "context": "EditMessageEditor > Editor",
    "bindings": {
      "escape": "menu::Cancel",
      "enter": "menu::Confirm",
      "alt-enter": "editor::Newline"
    }
  },
  {
    "context": "AgentFeedbackMessageEditor > Editor",
    "bindings": {
      "escape": "menu::Cancel",
      "enter": "menu::Confirm",
      "alt-enter": "editor::Newline"
    }
  },
  {
    "context": "ContextStrip",
    "bindings": {
      "up": "agent::FocusUp",
      "right": "agent::FocusRight",
      "left": "agent::FocusLeft",
      "down": "agent::FocusDown",
      "backspace": "agent::RemoveFocusedContext",
      "enter": "agent::AcceptSuggestedContext"
    }
  },
  {
    "context": "ThreadHistory",
    "bindings": {
      "backspace": "agent::RemoveSelectedThread"
    }
  },
  {
    "context": "PromptLibrary",
    "bindings": {
      "new": "rules_library::NewRule",
      "ctrl-n": "rules_library::NewRule",
      "ctrl-shift-s": "rules_library::ToggleDefaultRule"
    }
  },
  {
    "context": "BufferSearchBar",
    "bindings": {
      "escape": "buffer_search::Dismiss",
      "tab": "buffer_search::FocusEditor",
      "enter": "search::SelectNextMatch",
      "shift-enter": "search::SelectPreviousMatch",
      "alt-enter": "search::SelectAllMatches",
      "find": "search::FocusSearch",
      "ctrl-f": "search::FocusSearch",
      "ctrl-h": "search::ToggleReplace",
      "ctrl-l": "search::ToggleSelection"
    }
  },
  {
    "context": "BufferSearchBar && in_replace > Editor",
    "bindings": {
      "enter": "search::ReplaceNext",
      "ctrl-enter": "search::ReplaceAll"
    }
  },
  {
    "context": "BufferSearchBar && !in_replace > Editor",
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar",
    "bindings": {
      "escape": "project_search::ToggleFocus",
      "shift-find": "search::FocusSearch",
      "ctrl-shift-f": "search::FocusSearch",
      "ctrl-shift-h": "search::ToggleReplace",
      "alt-ctrl-g": "search::ToggleRegex",
      "alt-ctrl-x": "search::ToggleRegex"
    }
  },
  {
    "context": "ProjectSearchBar > Editor",
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar && in_replace > Editor",
    "bindings": {
      "enter": "search::ReplaceNext",
      "ctrl-alt-enter": "search::ReplaceAll"
    }
  },
  {
    "context": "ProjectSearchView",
    "bindings": {
      "escape": "project_search::ToggleFocus",
      "ctrl-shift-h": "search::ToggleReplace",
      "alt-ctrl-g": "search::ToggleRegex",
      "alt-ctrl-x": "search::ToggleRegex"
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "alt-1": ["pane::ActivateItem", 0],
      "alt-2": ["pane::ActivateItem", 1],
      "alt-3": ["pane::ActivateItem", 2],
      "alt-4": ["pane::ActivateItem", 3],
      "alt-5": ["pane::ActivateItem", 4],
      "alt-6": ["pane::ActivateItem", 5],
      "alt-7": ["pane::ActivateItem", 6],
      "alt-8": ["pane::ActivateItem", 7],
      "alt-9": ["pane::ActivateItem", 8],
      "alt-0": "pane::ActivateLastItem",
      "ctrl-pageup": "pane::ActivatePreviousItem",
      "ctrl-pagedown": "pane::ActivateNextItem",
      "ctrl-shift-pageup": "pane::SwapItemLeft",
      "ctrl-shift-pagedown": "pane::SwapItemRight",
      "ctrl-f4": ["pane::CloseActiveItem", { "close_pinned": false }],
      "ctrl-w": ["pane::CloseActiveItem", { "close_pinned": false }],
      "alt-ctrl-t": ["pane::CloseInactiveItems", { "close_pinned": false }],
      "alt-ctrl-shift-w": "workspace::CloseInactiveTabsAndPanes",
      "back": "pane::GoBack",
      "ctrl-alt--": "pane::GoBack",
      "ctrl-alt-_": "pane::GoForward",
      "forward": "pane::GoForward",
      "ctrl-alt-g": "search::SelectNextMatch",
      "f3": "search::SelectNextMatch",
      "ctrl-alt-shift-g": "search::SelectPreviousMatch",
      "shift-f3": "search::SelectPreviousMatch",
      "shift-find": "project_search::ToggleFocus",
      "ctrl-shift-f": "project_search::ToggleFocus",
      "ctrl-alt-shift-h": "search::ToggleReplace",
      "ctrl-alt-shift-l": "search::ToggleSelection",
      "alt-enter": "search::SelectAllMatches",
      "alt-c": "search::ToggleCaseSensitive",
      "alt-w": "search::ToggleWholeWord",
      "alt-find": "project_search::ToggleFilters",
      "alt-ctrl-f": "project_search::ToggleFilters",
      "ctrl-alt-shift-r": "search::ToggleRegex",
      "ctrl-alt-shift-x": "search::ToggleRegex",
      "alt-r": "search::ToggleRegex"
    }
  },
  // Bindings from VS Code
  {
    "context": "Editor",
    "bindings": {
      "ctrl-[": "editor::Outdent",
      "ctrl-]": "editor::Indent",
      "shift-alt-up": "editor::AddSelectionAbove", // Insert Cursor Above
      "shift-alt-down": "editor::AddSelectionBelow", // Insert Cursor Below
      "ctrl-shift-k": "editor::DeleteLine",
      "alt-up": "editor::MoveLineUp",
      "alt-down": "editor::MoveLineDown",
      "ctrl-alt-shift-up": "editor::DuplicateLineUp",
      "ctrl-alt-shift-down": "editor::DuplicateLineDown",
      "alt-shift-right": "editor::SelectLargerSyntaxNode", // Expand Selection
      "alt-shift-left": "editor::SelectSmallerSyntaxNode", // Shrink Selection
      "ctrl-shift-l": "editor::SelectAllMatches", // Select all occurrences of current selection
      "ctrl-f2": "editor::SelectAllMatches", // Select all occurrences of current word
      "ctrl-d": ["editor::SelectNext", { "replace_newest": false }], // editor.action.addSelectionToNextFindMatch  / find_under_expand
      "ctrl-shift-down": ["editor::SelectNext", { "replace_newest": false }], // editor.action.addSelectionToNextFindMatch
      "ctrl-shift-up": ["editor::SelectPrevious", { "replace_newest": false }], // editor.action.addSelectionToPreviousFindMatch
      "ctrl-/": ["editor::ToggleComments", { "advance_downwards": false }],
      "ctrl-u": "editor::UndoSelection",
      "ctrl-shift-u": "editor::RedoSelection",
      "f8": "editor::GoToDiagnostic",
      "shift-f8": "editor::GoToPreviousDiagnostic",
      "f2": "editor::Rename",
      "f12": "editor::GoToDefinition",
      "alt-f12": "editor::GoToDefinitionSplit",
      "ctrl-shift-f10": "editor::GoToDefinitionSplit",
      "ctrl-f12": "editor::GoToTypeDefinition",
      "shift-f12": "editor::GoToImplementation",
      "alt-ctrl-f12": "editor::GoToTypeDefinitionSplit",
      "alt-shift-f12": "editor::FindAllReferences",
      "ctrl-m": "editor::MoveToEnclosingBracket",
      "ctrl-|": "editor::MoveToEnclosingBracket",
      "ctrl-{": "editor::Fold",
      "ctrl-}": "editor::UnfoldLines",
      "ctrl-space": "editor::ShowCompletions",
      "ctrl-shift-space": "editor::ShowWordCompletions",
      "ctrl-.": "editor::ToggleCodeActions",
      "ctrl-\\": "pane::SplitRight",
      "ctrl-shift-v": "markdown::OpenPreview",
      "ctrl-alt-shift-c": "editor::DisplayCursorNames",
      "alt-.": "editor::GoToHunk",
      "alt-,": "editor::GoToPreviousHunk"
    }
  },
  {
    "context": "Editor && mode == full",
    "bindings": {
      "ctrl-shift-o": "outline::Toggle",
      "ctrl-g": "go_to_line::Toggle"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-j": "menu::SelectNext",
      "ctrl-k": "menu::SelectPrevious",
      // "shift shift": "file_finder::Toggle"
      // z commands
      // "z ctrl-b": "workspace::ToggleLeftDock",
      // "z ctrl-alt-b": "workspace::ToggleRightDock",
      // "z ctrl-j": "workspace::ToggleBottomDock",

      // Change the default action on `menu::Confirm` by setting the parameter
      // "alt-ctrl-o": ["projects::OpenRecent", { "create_new_window": true }],
      "alt-open": "projects::OpenRecent",
      "alt-ctrl-o": "projects::OpenRecent",
      "alt-shift-open": "projects::OpenRemote",
      "alt-ctrl-shift-o": "projects::OpenRemote",
      "alt-ctrl-shift-b": "branches::OpenRecent",
      "alt-shift-enter": "toast::RunAction",
      "ctrl-~": "workspace::NewTerminal",
      "save": "workspace::Save",
      "ctrl-s": "workspace::Save",
      "shift-save": "workspace::SaveAs",
      "ctrl-shift-s": "workspace::SaveAs",
      "new": "workspace::NewFile",
      "ctrl-n": "workspace::NewFile",
      "shift-new": "workspace::NewWindow",
      "ctrl-shift-n": "workspace::NewWindow",
      "ctrl-`": "terminal_panel::ToggleFocus",
      "f10": ["app_menu::OpenApplicationMenu", "Zed"],
      "alt-1": ["workspace::ActivatePane", 0],
      "alt-2": ["workspace::ActivatePane", 1],
      "alt-3": ["workspace::ActivatePane", 2],
      "alt-4": ["workspace::ActivatePane", 3],
      "alt-5": ["workspace::ActivatePane", 4],
      "alt-6": ["workspace::ActivatePane", 5],
      "alt-7": ["workspace::ActivatePane", 6],
      "alt-8": ["workspace::ActivatePane", 7],
      "alt-9": ["workspace::ActivatePane", 8],
      "ctrl-alt-b": "workspace::ToggleRightDock",
      "ctrl-b": "workspace::ToggleLeftDock",
      "ctrl-alt-y": "workspace::CloseAllDocks",
      "shift-find": "pane::DeploySearch",
      "ctrl-shift-f": "pane::DeploySearch",
      "ctrl-shift-h": ["pane::DeploySearch", { "replace_enabled": true }],
      "ctrl-shift-t": "pane::ReopenClosedItem",
      "ctrl-t": "project_symbols::Toggle",
      "ctrl-p": "file_finder::Toggle",
      "ctrl-tab": "tab_switcher::Toggle",
      "ctrl-shift-tab": ["tab_switcher::Toggle", { "select_last": true }],
      "ctrl-e": "file_finder::Toggle",
      "f1": "command_palette::Toggle",
      "ctrl-shift-p": "command_palette::Toggle",
      "ctrl-shift-m": "diagnostics::Deploy",
      "ctrl-shift-e": "project_panel::ToggleFocus",
      "ctrl-shift-b": "outline_panel::ToggleFocus",
      "ctrl-shift-g": "git_panel::ToggleFocus",
      "ctrl-?": "agent::ToggleFocus",
      "alt-save": "workspace::SaveAll",
      "ctrl-alt-s": "workspace::SaveAll",
      "escape": "workspace::Unfollow",
      "ctrl-shift-x": "zed::Extensions",
      "ctrl-shift-r": "task::Rerun",
      "ctrl-alt-r": "task::Rerun",
      "alt-t": "task::Rerun",
      "alt-shift-t": "task::Spawn",
      "alt-shift-r": ["task::Spawn", { "reveal_target": "center" }]
      // also possible to spawn tasks by name:
      // "foo-bar": ["task::Spawn", { "task_name": "MyTask", "reveal_target": "dock" }]
      // or by tag:
      // "foo-bar": ["task::Spawn", { "task_tag": "MyTag" }],
    }
  },
  {
    "context": "ApplicationMenu",
    "bindings": {
      "f10": "menu::Cancel",
      "left": "app_menu::ActivateMenuLeft",
      "right": "app_menu::ActivateMenuRight"
    }
  },
  // Bindings from Sublime Text
  {
    "context": "Editor",
    "bindings": {
      "ctrl-shift-v": "editor::Redo",
      // "j k": ["workspace::SendKeystrokes", "escape"]
      "ctrl-shift-d": "editor::DuplicateLineDown",
      "ctrl-shift-j": "editor::JoinLines",
      "ctrl-alt-backspace": "editor::DeleteToPreviousSubwordStart",
      "ctrl-alt-h": "editor::DeleteToPreviousSubwordStart",
      "ctrl-alt-delete": "editor::DeleteToNextSubwordEnd",
      "ctrl-alt-d": "editor::DeleteToNextSubwordEnd",
      "ctrl-alt-left": "editor::MoveToPreviousSubwordStart",
      "ctrl-alt-right": "editor::MoveToNextSubwordEnd",
      "ctrl-alt-shift-left": "editor::SelectToPreviousSubwordStart",
      "ctrl-alt-shift-b": "editor::SelectToPreviousSubwordStart",
      "ctrl-alt-shift-right": "editor::SelectToNextSubwordEnd",
      "ctrl-alt-shift-f": "editor::SelectToNextSubwordEnd"
    }
  },
  // Bindings from Atom
  {
    "context": "Pane",
    "bindings": {}
  },
  // Bindings that should be unified with bindings for more general actions
  {
    "context": "Editor && renaming",
    "bindings": {
      "enter": "editor::ConfirmRename"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "enter": "editor::ConfirmCompletion",
      "shift-enter": "editor::ConfirmCompletionReplace",
      "tab": "editor::ComposeCompletion",
      // This is the actual keybind to accept the completion
      "ctrl-l": "editor::ComposeCompletion"
    }
  },
  // Bindings for accepting edit predictions
  //
  // alt-l is provided as an alternative to tab/alt-tab. and will be displayed in the UI. This is
  // because alt-tab may not be available, as it is often used for window switching.
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "alt-tab": "editor::AcceptEditPrediction",
      "alt-l": "editor::AcceptEditPrediction",
      "tab": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "bindings": {
      "alt-tab": "editor::AcceptEditPrediction",
      "alt-l": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "bindings": {
      "enter": "editor::ConfirmCodeAction"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "ctrl-p": "editor::ContextMenuPrevious",
      "ctrl-k": "editor::ContextMenuPrevious",
      "ctrl-n": "editor::ContextMenuNext",
      "ctrl-j": "editor::ContextMenuNext",
      "ctrl-g": "editor::ContextMenuFirst",
      "ctrl-G": "editor::ContextMenuLast"
    }
  },
  // Custom bindings
  {
    "bindings": {
      "ctrl-alt-shift-f": "workspace::FollowNextCollaborator",
      "ctrl-alt-i": "zed::DebugElements"
    }
  },
  {
    "context": "!Terminal",
    "bindings": {
      "ctrl-shift-c": "collab_panel::ToggleFocus"
    }
  },
  {
    "context": "!ContextEditor > Editor && mode == full",
    "bindings": {
      "alt-enter": "editor::OpenExcerpts",
      "shift-enter": "editor::ExpandExcerpts",
      "ctrl-alt-enter": "editor::OpenExcerptsSplit",
      "ctrl-shift-e": "pane::RevealInProjectPanel",
      "ctrl-f8": "editor::GoToHunk",
      "ctrl-shift-f8": "editor::GoToPreviousHunk",
      "ctrl-enter": "assistant::InlineAssist",
      "ctrl-:": "editor::ToggleInlayHints"
    }
  },
  {
    "context": "PromptEditor",
    "bindings": {
      "ctrl-[": "agent::CyclePreviousInlineAssist",
      "ctrl-]": "agent::CycleNextInlineAssist",
      "ctrl-alt-e": "agent::RemoveAllContext"
    }
  },
  {
    "context": "Prompt",
    "bindings": {
      "left": "menu::SelectPrevious",
      "right": "menu::SelectNext",
      "h": "menu::SelectPrevious",
      "l": "menu::SelectNext"
    }
  },
  {
    "context": "ProjectSearchBar && !in_replace",
    "bindings": {
      "ctrl-enter": "project_search::SearchInNew"
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "bindings": {
      "escape": "menu::Cancel",
      "left": "outline_panel::CollapseSelectedEntry",
      "right": "outline_panel::ExpandSelectedEntry",
      "alt-copy": "outline_panel::CopyPath",
      "ctrl-alt-c": "outline_panel::CopyPath",
      "alt-shift-copy": "workspace::CopyRelativePath",
      "alt-ctrl-shift-c": "workspace::CopyRelativePath",
      "alt-ctrl-r": "outline_panel::RevealInFileManager",
      "space": "outline_panel::OpenSelectedEntry",
      "shift-down": "menu::SelectNext",
      "shift-up": "menu::SelectPrevious",
      "alt-enter": "editor::OpenExcerpts",
      "ctrl-alt-enter": "editor::OpenExcerptsSplit"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "left": "project_panel::CollapseSelectedEntry",
      "right": "project_panel::ExpandSelectedEntry",
      "new": "project_panel::NewFile",
      "ctrl-n": "project_panel::NewFile",
      "alt-new": "project_panel::NewDirectory",
      "alt-ctrl-n": "project_panel::NewDirectory",
      "cut": "project_panel::Cut",
      "ctrl-x": "project_panel::Cut",
      "copy": "project_panel::Copy",
      "ctrl-insert": "project_panel::Copy",
      "ctrl-c": "project_panel::Copy",
      "paste": "project_panel::Paste",
      "shift-insert": "project_panel::Paste",
      "ctrl-v": "project_panel::Paste",
      "alt-copy": "project_panel::CopyPath",
      "ctrl-alt-c": "project_panel::CopyPath",
      "alt-shift-copy": "workspace::CopyRelativePath",
      "alt-ctrl-shift-c": "workspace::CopyRelativePath",
      "enter": "project_panel::Rename",
      "f2": "project_panel::Rename",
      "backspace": ["project_panel::Trash", { "skip_prompt": false }],
      "delete": ["project_panel::Trash", { "skip_prompt": false }],
      "shift-delete": ["project_panel::Delete", { "skip_prompt": false }],
      "ctrl-backspace": ["project_panel::Delete", { "skip_prompt": false }],
      "ctrl-delete": ["project_panel::Delete", { "skip_prompt": false }],
      "alt-ctrl-r": "project_panel::RevealInFileManager",
      "ctrl-shift-enter": "project_panel::OpenWithSystem",
      "shift-find": "project_panel::NewSearchInDirectory",
      "ctrl-shift-f": "project_panel::NewSearchInDirectory",
      "shift-down": "menu::SelectNext",
      "shift-up": "menu::SelectPrevious",
      "escape": "menu::Cancel"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "space": "project_panel::Open"
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "bindings": {
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext",
      "enter": "menu::Confirm",
      "alt-y": "git::StageFile",
      "alt-shift-y": "git::UnstageFile",
      "ctrl-alt-y": "git::ToggleStaged",
      "space": "git::ToggleStaged",
      "tab": "git_panel::FocusEditor",
      "shift-tab": "git_panel::FocusEditor",
      "escape": "git_panel::ToggleFocus",
      "ctrl-enter": "git::Commit",
      "ctrl-shift-enter": "git::Amend",
      "alt-enter": "menu::SecondaryConfirm",
      "delete": ["git::RestoreFile", { "skip_prompt": false }],
      "backspace": ["git::RestoreFile", { "skip_prompt": false }],
      "shift-delete": ["git::RestoreFile", { "skip_prompt": false }],
      "ctrl-backspace": ["git::RestoreFile", { "skip_prompt": false }],
      "ctrl-delete": ["git::RestoreFile", { "skip_prompt": false }]
    }
  },
  {
    "context": "GitPanel && CommitEditor",
    "use_key_equivalents": true,
    "bindings": {
      "escape": "git::Cancel"
    }
  },
  {
    "context": "GitCommit > Editor",
    "bindings": {
      "escape": "menu::Cancel",
      "enter": "editor::Newline",
      "ctrl-enter": "git::Commit",
      "ctrl-shift-enter": "git::Amend",
      "alt-l": "git::GenerateCommitMessage"
    }
  },
  {
    "context": "GitPanel",
    "bindings": {
      "ctrl-g ctrl-g": "git::Fetch",
      "ctrl-g up": "git::Push",
      "ctrl-g down": "git::Pull",
      "ctrl-g shift-up": "git::ForcePush",
      "ctrl-g d": "git::Diff",
      "ctrl-g backspace": "git::RestoreTrackedFiles",
      "ctrl-g shift-backspace": "git::TrashUntrackedFiles",
      "ctrl-space": "git::StageAll",
      "ctrl-shift-space": "git::UnstageAll"
    }
  },
  {
    "context": "GitDiff > Editor",
    "bindings": {
      "ctrl-enter": "git::Commit",
      "ctrl-shift-enter": "git::Amend",
      "ctrl-space": "git::StageAll",
      "ctrl-shift-space": "git::UnstageAll"
    }
  },
  {
    "context": "AskPass > Editor",
    "bindings": {
      "enter": "menu::Confirm"
    }
  },
  {
    "context": "GitPanel > Editor",
    "bindings": {
      "escape": "git_panel::FocusChanges",
      "tab": "git_panel::FocusChanges",
      "shift-tab": "git_panel::FocusChanges",
      "enter": "editor::Newline",
      "ctrl-enter": "git::Commit",
      "ctrl-shift-enter": "git::Amend",
      "alt-up": "git_panel::FocusChanges",
      "alt-l": "git::GenerateCommitMessage"
    }
  },
  {
    "context": "CollabPanel && not_editing",
    "bindings": {
      "ctrl-backspace": "collab_panel::Remove",
      "space": "menu::Confirm"
    }
  },
  {
    "context": "(CollabPanel && editing) > Editor",
    "bindings": {
      "space": "collab_panel::InsertSpace"
    }
  },
  {
    "context": "ChannelModal",
    "bindings": {
      "tab": "channel_modal::ToggleMode"
    }
  },
  {
    "context": "Picker > Editor",
    "bindings": {
      "escape": "menu::Cancel",
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext",
      "tab": "picker::ConfirmCompletion",
      "ctrl-l": "picker::ConfirmCompletion",
      "alt-enter": ["picker::ConfirmInput", { "secondary": false }]
    }
  },
  {
    "context": "ChannelModal > Picker > Editor",
    "bindings": {
      "tab": "channel_modal::ToggleMode"
    }
  },
  {
    "context": "FileFinder || (FileFinder > Picker > Editor) || (FileFinder > Picker > menu)",
    "bindings": {
      "ctrl-shift-p": "file_finder::SelectPrevious",
      "ctrl-j": "pane::SplitDown",
      "ctrl-h": "pane::SplitLeft",
      "ctrl-l": "pane::SplitRight"
    }
  },
  {
    "context": "TabSwitcher",
    "bindings": {
      "ctrl-shift-tab": "menu::SelectPrevious",
      "ctrl-up": "menu::SelectPrevious",
      "ctrl-down": "menu::SelectNext",
      "ctrl-backspace": "tab_switcher::CloseSelectedItem"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-alt-space": "terminal::ShowCharacterPalette",
      "copy": "terminal::Copy",
      "ctrl-insert": "terminal::Copy",
      "ctrl-shift-c": "terminal::Copy",
      "paste": "terminal::Paste",
      "shift-insert": "terminal::Paste",
      "ctrl-shift-v": "terminal::Paste",
      "ctrl-enter": "assistant::InlineAssist",
      "alt-b": ["terminal::SendText", "\u001bb"],
      "alt-f": ["terminal::SendText", "\u001bf"],
      "alt-.": ["terminal::SendText", "\u001b."],
      // Overrides for conflicting keybindings
      "ctrl-b": ["terminal::SendKeystroke", "ctrl-b"],
      "ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
      "ctrl-e": ["terminal::SendKeystroke", "ctrl-e"],
      "ctrl-o": ["terminal::SendKeystroke", "ctrl-o"],
      "ctrl-w": ["terminal::SendKeystroke", "ctrl-w"],
      "ctrl-shift-a": "editor::SelectAll",
      "find": "buffer_search::Deploy",
      "ctrl-shift-f": "buffer_search::Deploy",
      "ctrl-shift-l": "terminal::Clear",
      "ctrl-shift-w": "pane::CloseActiveItem",
      "up": ["terminal::SendKeystroke", "up"],
      "pageup": ["terminal::SendKeystroke", "pageup"],
      "down": ["terminal::SendKeystroke", "down"],
      "pagedown": ["terminal::SendKeystroke", "pagedown"],
      "escape": ["terminal::SendKeystroke", "escape"],
      "enter": ["terminal::SendKeystroke", "enter"],
      "shift-pageup": "terminal::ScrollPageUp",
      "shift-pagedown": "terminal::ScrollPageDown",
      "shift-up": "terminal::ScrollLineUp",
      "shift-down": "terminal::ScrollLineDown",
      "shift-home": "terminal::ScrollToTop",
      "shift-end": "terminal::ScrollToBottom",
      "ctrl-shift-space": "terminal::ToggleViMode"
    }
  },
  {
    "context": "ZedPredictModal",
    "bindings": {
      "escape": "menu::Cancel"
    }
  },
  {
    "context": "ConfigureContextServerModal > Editor",
    "bindings": {
      "escape": "menu::Cancel",
      "enter": "editor::Newline",
      "ctrl-enter": "menu::Confirm"
    }
  },
  {
    "context": "Diagnostics",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-r": "diagnostics::ToggleDiagnosticsRefresh"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      "i": ["vim::PushObject", { "around": false }],
      "a": ["vim::PushObject", { "around": true }],
      "left": "vim::Left",
      "h": "vim::Left",
      "backspace": "vim::WrappingLeft",
      "down": "vim::Down",
      "ctrl-j": "vim::Down",
      "j": "vim::Down",
      "ctrl-m": "vim::NextLineStart",
      "+": "vim::NextLineStart",
      "enter": "vim::NextLineStart",
      "-": "vim::PreviousLineStart",
      "shift-tab": "vim::Tab",
      "tab": "vim::Tab",
      "up": "vim::Up",
      "k": "vim::Up",
      "right": "vim::Right",
      "l": "vim::Right",
      "space": "vim::WrappingRight",
      "end": "vim::EndOfLine",
      "$": "vim::EndOfLine",
      "^": "vim::FirstNonWhitespace",
      "_": "vim::StartOfLineDownward",
      "g _": "vim::EndOfLineDownward",
      "shift-g": "vim::EndOfDocument",
      "{": "vim::StartOfParagraph",
      "}": "vim::EndOfParagraph",
      "(": "vim::SentenceBackward",
      ")": "vim::SentenceForward",
      "|": "vim::GoToColumn",
      "] ]": "vim::NextSectionStart",
      "] [": "vim::NextSectionEnd",
      "[ [": "vim::PreviousSectionStart",
      "[ ]": "vim::PreviousSectionEnd",
      "] m": "vim::NextMethodStart",
      "] shift-m": "vim::NextMethodEnd",
      "[ m": "vim::PreviousMethodStart",
      "[ shift-m": "vim::PreviousMethodEnd",
      "[ *": "vim::PreviousComment",
      "[ /": "vim::PreviousComment",
      "] *": "vim::NextComment",
      "] /": "vim::NextComment",
      "[ -": "vim::PreviousLesserIndent",
      "[ +": "vim::PreviousGreaterIndent",
      "[ =": "vim::PreviousSameIndent",
      "] -": "vim::NextLesserIndent",
      "] +": "vim::NextGreaterIndent",
      "] =": "vim::NextSameIndent",
      "] b": "pane::ActivateNextItem",
      "[ b": "pane::ActivatePreviousItem",
      "] shift-b": "pane::ActivateLastItem",
      "[ shift-b": ["pane::ActivateItem", 0],
      "] space": "vim::InsertEmptyLineBelow",
      "[ space": "vim::InsertEmptyLineAbove",
      // Word motions
      "w": "vim::NextWordStart",
      "e": "vim::NextWordEnd",
      "b": "vim::PreviousWordStart",
      "g e": "vim::PreviousWordEnd",
      // Subword motions
      // "w": "vim::NextSubwordStart",
      // "b": "vim::PreviousSubwordStart",
      // "e": "vim::NextSubwordEnd",
      // "g e": "vim::PreviousSubwordEnd",
      "shift-w": ["vim::NextWordStart", { "ignore_punctuation": true }],
      "shift-e": ["vim::NextWordEnd", { "ignore_punctuation": true }],
      "shift-b": ["vim::PreviousWordStart", { "ignore_punctuation": true }],
      "g shift-e": ["vim::PreviousWordEnd", { "ignore_punctuation": true }],
      "/": "vim::Search",
      "g /": "pane::DeploySearch",
      "?": ["vim::Search", { "backwards": true }],
      "*": "vim::MoveToNext",
      "#": "vim::MoveToPrevious",
      "n": "vim::MoveToNextMatch",
      "shift-n": "vim::MoveToPreviousMatch",
      "%": "vim::Matching",
      "] }": ["vim::UnmatchedForward", { "char": "}" }],
      "[ {": ["vim::UnmatchedBackward", { "char": "{" }],
      "] )": ["vim::UnmatchedForward", { "char": ")" }],
      "[ (": ["vim::UnmatchedBackward", { "char": "(" }],
      "f": ["vim::PushFindForward", { "before": false }],
      "t": ["vim::PushFindForward", { "before": true }],
      "shift-f": ["vim::PushFindBackward", { "after": false }],
      "shift-t": ["vim::PushFindBackward", { "after": true }],
      "m": "vim::PushMark",
      "'": ["vim::PushJump", { "line": true }],
      "`": ["vim::PushJump", { "line": false }],
      // disabled this as it conflicts with ; ; quick save
      //";": "vim::RepeatFind",
      ",": "vim::RepeatFindReversed",
      "ctrl-o": "pane::GoBack",
      "ctrl-i": "pane::GoForward",
      "ctrl-]": "editor::GoToDefinition",
      "escape": "vim::SwitchToNormalMode",
      "ctrl-[": "vim::SwitchToNormalMode",
      "v": "vim::ToggleVisual",
      "shift-v": "vim::ToggleVisualLine",
      "ctrl-g": "vim::ShowLocation",
      "ctrl-v": "vim::ToggleVisualBlock",
      "ctrl-q": "vim::ToggleVisualBlock",
      "shift-k": "editor::Hover",
      "shift-r": "vim::ToggleReplace",
      "0": "vim::StartOfLine",
      "home": "vim::StartOfLine",
      "ctrl-f": "vim::PageDown",
      "pagedown": "vim::PageDown",
      "ctrl-b": "vim::PageUp",
      "pageup": "vim::PageUp",
      "ctrl-d": "vim::ScrollDown",
      "ctrl-u": "vim::ScrollUp",
      "ctrl-e": "vim::LineDown",
      "ctrl-y": "vim::LineUp",
      // "g" commands
      "g shift-r": "vim::PushReplaceWithRegister",
      "g r n": "editor::Rename",
      "g r r": "editor::FindAllReferences",
      "g r i": "editor::GoToImplementation",
      "g r a": "editor::ToggleCodeActions",
      "g g": "vim::StartOfDocument",
      "g h": "editor::Hover",
      "g t": "pane::ActivateNextItem",
      "g shift-t": "pane::ActivatePreviousItem",
      "g d": "editor::GoToDefinition",
      "g shift-d": "editor::GoToDeclaration",
      "g y": "editor::GoToTypeDefinition",
      "g shift-i": "editor::GoToImplementation",
      "g x": "editor::OpenUrl",
      "g f": "editor::OpenSelectedFilename",
      "g n": "vim::SelectNextMatch",
      "g shift-n": "vim::SelectPreviousMatch",
      "g l": "vim::SelectNext",
      "g shift-l": "vim::SelectPrevious",
      "g >": ["editor::SelectNext", { "replace_newest": true }],
      "g <": ["editor::SelectPrevious", { "replace_newest": true }],
      "g a": "editor::SelectAllMatches",
      "g s": "outline::Toggle",
      "g shift-o": "outline::Toggle",
      "g shift-s": "project_symbols::Toggle",
      "g .": "editor::ToggleCodeActions", // zed specific
      "g shift-a": "editor::FindAllReferences", // zed specific
      "g space": "editor::OpenExcerpts", // zed specific
      "g *": ["vim::MoveToNext", { "partial_word": true }],
      "g #": ["vim::MoveToPrevious", { "partial_word": true }],
      "g j": ["vim::Down", { "display_lines": true }],
      "g down": ["vim::Down", { "display_lines": true }],
      "g k": ["vim::Up", { "display_lines": true }],
      "g up": ["vim::Up", { "display_lines": true }],
      "g $": ["vim::EndOfLine", { "display_lines": true }],
      "g end": ["vim::EndOfLine", { "display_lines": true }],
      "g 0": ["vim::StartOfLine", { "display_lines": true }],
      "g home": ["vim::StartOfLine", { "display_lines": true }],
      "g ^": ["vim::FirstNonWhitespace", { "display_lines": true }],
      "g v": "vim::RestoreVisualSelection",
      "g ]": "editor::GoToDiagnostic",
      "g [": "editor::GoToPreviousDiagnostic",
      "g i": "vim::InsertAtPrevious",
      "g ,": "vim::ChangeListNewer",
      "g ;": "vim::ChangeListOlder",
      "shift-h": "vim::WindowTop",
      "shift-m": "vim::WindowMiddle",
      "shift-l": "vim::WindowBottom",
      "q": "vim::ToggleRecord",
      "shift-q": "vim::ReplayLastRecording",
      "@": "vim::PushReplayRegister",
      // z commands
      "z enter": ["workspace::SendKeystrokes", "z t ^"],
      "z -": ["workspace::SendKeystrokes", "z b ^"],
      "z ^": ["workspace::SendKeystrokes", "shift-h k z b ^"],
      "z +": ["workspace::SendKeystrokes", "shift-l j z t ^"],
      "z t": "editor::ScrollCursorTop",
      "z z": "editor::ScrollCursorCenter",
      "z .": ["workspace::SendKeystrokes", "z z ^"],
      "z b": "editor::ScrollCursorBottom",
      "z a": "editor::ToggleFold",
      "z shift-a": "editor::ToggleFoldRecursive",
      "z c": "editor::Fold",
      "z shift-c": "editor::FoldRecursive",
      "z o": "editor::UnfoldLines",
      "z shift-o": "editor::UnfoldRecursive",
      "z f": "editor::FoldSelectedRanges",
      "z shift-m": "editor::FoldAll",
      "z shift-r": "editor::UnfoldAll",
      "shift-z shift-q": ["pane::CloseActiveItem", { "save_intent": "skip" }],
      "shift-z shift-z": [
        "pane::CloseActiveItem",
        { "save_intent": "save_all" }
      ],
      // Count support
      "1": ["vim::Number", 1],
      "2": ["vim::Number", 2],
      "3": ["vim::Number", 3],
      "4": ["vim::Number", 4],
      "5": ["vim::Number", 5],
      "6": ["vim::Number", 6],
      "7": ["vim::Number", 7],
      "8": ["vim::Number", 8],
      "9": ["vim::Number", 9],
      "ctrl-w d": "editor::GoToDefinitionSplit",
      "ctrl-w g d": "editor::GoToDefinitionSplit",
      "ctrl-w shift-d": "editor::GoToTypeDefinitionSplit",
      "ctrl-w g shift-d": "editor::GoToTypeDefinitionSplit",
      "ctrl-w space": "editor::OpenExcerptsSplit",
      "ctrl-w g space": "editor::OpenExcerptsSplit",
      "ctrl-6": "pane::AlternateFile",
      "ctrl-^": "pane::AlternateFile"
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {
      "; ;": "workspace::Save",
      "ctrl-[": "editor::Cancel",
      "escape": "editor::Cancel",
      ":": "command_palette::Toggle",
      ".": "vim::Repeat",
      "c": "vim::PushChange",
      "shift-c": "vim::ChangeToEndOfLine",
      "d": "vim::PushDelete",
      "delete": "vim::DeleteRight",
      "shift-d": "vim::DeleteToEndOfLine",
      "shift-j": "vim::JoinLines",
      "g shift-j": "vim::JoinLinesNoWhitespace",
      "y": "vim::PushYank",
      "shift-y": "vim::YankLine",
      "i": "vim::InsertBefore",
      "shift-i": "vim::InsertFirstNonWhitespace",
      "a": "vim::InsertAfter",
      "shift-a": "vim::InsertEndOfLine",
      "x": "vim::DeleteRight",
      "shift-x": "vim::DeleteLeft",
      "o": "vim::InsertLineBelow",
      "shift-o": "vim::InsertLineAbove",
      "~": "vim::ChangeCase",
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "p": "vim::Paste",
      "shift-p": ["vim::Paste", { "before": true }],
      "u": "vim::Undo",
      "ctrl-r": "vim::Redo",
      "r": "vim::PushReplace",
      "s": "vim::Substitute",
      "shift-s": "vim::SubstituteLine",
      ">": "vim::PushIndent",
      "<": "vim::PushOutdent",
      "=": "vim::PushAutoIndent",
      "!": "vim::PushShellCommand",
      "g u": "vim::PushLowercase",
      "g shift-u": "vim::PushUppercase",
      "g ~": "vim::PushOppositeCase",
      "g ?": "vim::PushRot13",
      // "g ?": "vim::PushRot47",
      "\"": "vim::PushRegister",
      "g w": "vim::PushRewrap",
      "g q": "vim::PushRewrap",
      "ctrl-pagedown": "pane::ActivateNextItem",
      "ctrl-pageup": "pane::ActivatePreviousItem",
      "insert": "vim::InsertBefore",
      // tree-sitter related commands
      "[ x": "vim::SelectLargerSyntaxNode",
      "] x": "vim::SelectSmallerSyntaxNode",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      "] c": "editor::GoToHunk",
      "[ c": "editor::GoToPreviousHunk",
      "g c": "vim::PushToggleComments"
    }
  },
  {
    "context": "VimControl && VimCount",
    "bindings": {
      "0": ["vim::Number", 0],
      ":": "vim::CountCommand",
      "%": "vim::GoToPercentage"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      ":": "vim::VisualCommand",
      "u": "vim::ConvertToLowerCase",
      "shift-u": "vim::ConvertToUpperCase",
      "shift-o": "vim::OtherEnd",
      "o": "vim::OtherEndRowAware",
      "d": "vim::VisualDelete",
      "x": "vim::VisualDelete",
      "delete": "vim::VisualDelete",
      "shift-d": "vim::VisualDeleteLine",
      "shift-x": "vim::VisualDeleteLine",
      "y": "vim::VisualYank",
      "shift-y": "vim::VisualYankLine",
      "p": "vim::Paste",
      "shift-p": ["vim::Paste", { "preserve_clipboard": true }],
      "c": "vim::Substitute",
      "s": "vim::Substitute",
      "shift-r": "vim::SubstituteLine",
      "shift-s": "vim::SubstituteLine",
      "~": "vim::ChangeCase",
      "*": ["vim::MoveToNext", { "partial_word": true }],
      "#": ["vim::MoveToPrevious", { "partial_word": true }],
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "g ctrl-a": ["vim::Increment", { "step": true }],
      "g ctrl-x": ["vim::Decrement", { "step": true }],
      "shift-i": "vim::InsertBefore",
      "shift-a": "vim::InsertAfter",
      "g shift-i": "vim::VisualInsertFirstNonWhiteSpace",
      "g shift-a": "vim::VisualInsertEndOfLine",
      "shift-j": "vim::JoinLines",
      "g shift-j": "vim::JoinLinesNoWhitespace",
      "r": "vim::PushReplace",
      "ctrl-c": "vim::SwitchToNormalMode",
      "ctrl-[": "vim::SwitchToNormalMode",
      "escape": "vim::SwitchToNormalMode",
      ">": "vim::Indent",
      "<": "vim::Outdent",
      "=": "vim::AutoIndent",
      "!": "vim::ShellCommand",
      "i": ["vim::PushObject", { "around": false }],
      "a": ["vim::PushObject", { "around": true }],
      "g shift-r": ["vim::Paste", { "preserve_clipboard": true }],
      "g c": "vim::ToggleComments",
      "g q": "vim::Rewrap",
      "g ?": "vim::ConvertToRot13",
      // "g ?": "vim::ConvertToRot47",
      "\"": "vim::PushRegister",
      // tree-sitter related commands
      "[ x": "editor::SelectLargerSyntaxNode",
      "] x": "editor::SelectSmallerSyntaxNode"
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      "ctrl-c": "vim::NormalBefore",
      "ctrl-[": "vim::NormalBefore",
      "escape": "vim::NormalBefore",
      "ctrl-x": null,
      "ctrl-x ctrl-o": "editor::ShowCompletions",
      "ctrl-x ctrl-a": "assistant::InlineAssist", // zed specific
      "ctrl-x ctrl-c": "editor::ShowEditPrediction", // zed specific
      "ctrl-x ctrl-l": "editor::ToggleCodeActions", // zed specific
      "ctrl-x ctrl-z": "editor::Cancel",
      "ctrl-w": "editor::DeleteToPreviousWordStart",
      "ctrl-u": "editor::DeleteToBeginningOfLine",
      "ctrl-t": "vim::Indent",
      "ctrl-d": "vim::Outdent",
      "ctrl-v": ["vim::PushLiteral", {}],
      "ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
      "ctrl-q": ["vim::PushLiteral", {}],
      "ctrl-shift-q": ["vim::PushLiteral", {}],
      "ctrl-r": "vim::PushRegister",
      "insert": "vim::ToggleReplace",
      "ctrl-o": "vim::TemporaryNormal",
      "ctrl-s": "editor::ShowSignatureHelp"
    }
  },
  {
    "context": "vim_mode == helix_normal && !menu",
    "bindings": {
      "escape": "editor::Cancel",
      "ctrl-[": "editor::Cancel",
      ":": "command_palette::Toggle",
      "shift-d": "vim::DeleteToEndOfLine",
      "shift-j": "vim::JoinLines",
      "y": "editor::Copy",
      "shift-y": "vim::YankLine",
      "i": "vim::InsertBefore",
      "shift-i": "vim::InsertFirstNonWhitespace",
      "a": "vim::InsertAfter",
      "shift-a": "vim::InsertEndOfLine",
      "o": "vim::InsertLineBelow",
      "shift-o": "vim::InsertLineAbove",
      "~": "vim::ChangeCase",
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "p": "vim::Paste",
      "shift-p": ["vim::Paste", { "before": true }],
      "u": "vim::Undo",
      "ctrl-r": "vim::Redo",
      "r": "vim::PushReplace",
      "s": "vim::Substitute",
      "shift-s": "vim::SubstituteLine",
      ">": "vim::Indent",
      "<": "vim::Outdent",
      "=": "vim::AutoIndent",
      "g u": "vim::PushLowercase",
      "g shift-u": "vim::PushUppercase",
      "g ~": "vim::PushOppositeCase",
      "\"": "vim::PushRegister",
      "g q": "vim::PushRewrap",
      "g w": "vim::PushRewrap",
      "ctrl-pagedown": "pane::ActivateNextItem",
      "ctrl-pageup": "pane::ActivatePreviousItem",
      "insert": "vim::InsertBefore",
      // tree-sitter related commands
      "[ x": "editor::SelectLargerSyntaxNode",
      "] x": "editor::SelectSmallerSyntaxNode",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      "] c": "editor::GoToHunk",
      "[ c": "editor::GoToPreviousHunk",
      // Goto mode
      "g n": "pane::ActivateNextItem",
      "g p": "pane::ActivatePreviousItem",
      // "tab": "pane::ActivateNextItem",
      // "shift-tab": "pane::ActivatePrevItem",
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",
      "g l": "vim::EndOfLine",
      "g h": "vim::StartOfLine",
      "g s": "vim::FirstNonWhitespace", // "g s" default behavior is "space s"
      "g e": "vim::EndOfDocument",
      "g y": "editor::GoToTypeDefinition",
      "g r": "editor::FindAllReferences", // zed specific
      "g t": "vim::WindowTop",
      "g c": "vim::WindowMiddle",
      "g b": "vim::WindowBottom",

      "x": "editor::SelectLine",
      "shift-x": "editor::SelectLine",
      // Window mode
      "space w h": "workspace::ActivatePaneLeft",
      "space w l": "workspace::ActivatePaneRight",
      "space w k": "workspace::ActivatePaneUp",
      "space w j": "workspace::ActivatePaneDown",
      "space w q": "pane::CloseActiveItem",
      "space w s": "pane::SplitRight",
      "space w r": "pane::SplitRight",
      "space w v": "pane::SplitDown",
      "space w d": "pane::SplitDown",
      // Space mode
      "space f": "file_finder::Toggle",
      "space k": "editor::Hover",
      "space s": "outline::Toggle",
      "space shift-s": "project_symbols::Toggle",
      "space d": "editor::GoToDiagnostic",
      "space r": "editor::Rename",
      "space a": "editor::ToggleCodeActions",
      "space h": "editor::SelectAllMatches",
      "space c": "editor::ToggleComments",
      "space y": "editor::Copy",
      "space p": "editor::Paste",
      // Match mode
      "m m": "vim::Matching",
      "m i w": ["workspace::SendKeystrokes", "v i w"],
      "shift-u": "editor::Redo",
      "ctrl-c": "editor::ToggleComments",
      "d": "vim::HelixDelete",
      "c": "vim::Substitute",
      "shift-c": "editor::AddSelectionBelow"
    }
  },
  {
    "context": "vim_mode == insert && !(showing_code_actions || showing_completions)",
    "bindings": {
      "ctrl-p": "editor::ShowWordCompletions",
      "ctrl-n": "editor::ShowWordCompletions"
    }
  },
  {
    "context": "vim_mode == replace",
    "bindings": {
      "ctrl-c": "vim::NormalBefore",
      "ctrl-[": "vim::NormalBefore",
      "escape": "vim::NormalBefore",
      "ctrl-v": ["vim::PushLiteral", {}],
      "ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
      "ctrl-q": ["vim::PushLiteral", {}],
      "ctrl-shift-q": ["vim::PushLiteral", {}],
      "backspace": "vim::UndoReplace",
      "tab": "vim::Tab",
      "enter": "vim::Enter",
      "insert": "vim::InsertBefore"
    }
  },
  {
    "context": "vim_mode == waiting",
    "bindings": {
      "tab": "vim::Tab",
      "enter": "vim::Enter",
      "ctrl-c": "vim::ClearOperators",
      "ctrl-[": "vim::ClearOperators",
      "escape": "vim::ClearOperators",
      "ctrl-v": ["vim::PushLiteral", {}],
      "ctrl-q": ["vim::PushLiteral", {}]
    }
  },
  {
    "context": "Editor && vim_mode == waiting && (vim_operator == ys || vim_operator == cs)",
    "bindings": {
      "escape": "vim::SwitchToNormalMode"
    }
  },
  {
    "context": "vim_mode == operator",
    "bindings": {
      "ctrl-c": "vim::ClearOperators",
      "ctrl-[": "vim::ClearOperators",
      "escape": "vim::ClearOperators",
      "g c": "vim::Comment"
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      "w": "vim::Word",
      "shift-w": ["vim::Word", { "ignore_punctuation": true }],
      // Subword TextObject
      // "w": "vim::Subword",
      // "shift-w": ["vim::Subword", { "ignore_punctuation": true }],
      "t": "vim::Tag",
      "s": "vim::Sentence",
      "p": "vim::Paragraph",
      "'": "vim::Quotes",
      "`": "vim::BackQuotes",
      "\"": "vim::DoubleQuotes",
      // "q": "vim::AnyQuotes",
      "q": "vim::MiniQuotes",
      "|": "vim::VerticalBars",
      "(": "vim::Parentheses",
      ")": "vim::Parentheses",
      "b": "vim::Parentheses",
      // "b": "vim::AnyBrackets",
      // "b": "vim::MiniBrackets",
      "[": "vim::SquareBrackets",
      "]": "vim::SquareBrackets",
      "r": "vim::SquareBrackets",
      "{": "vim::CurlyBrackets",
      "}": "vim::CurlyBrackets",
      "shift-b": "vim::CurlyBrackets",
      "<": "vim::AngleBrackets",
      ">": "vim::AngleBrackets",
      "a": "vim::Argument",
      "i": "vim::IndentObj",
      "shift-i": ["vim::IndentObj", { "include_below": true }],
      "f": "vim::Method",
      "c": "vim::Class",
      "e": "vim::EntireFile"
    }
  },
  {
    "context": "vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "x": "vim::Exchange",
      "d": "editor::Rename", // zed specific
      "s": ["vim::PushChangeSurrounds", {}]
    }
  },
  {
    "context": "vim_operator == d",
    "bindings": {
      "d": "vim::CurrentLine",
      "s": "vim::PushDeleteSurrounds",
      "v": "vim::PushForcedMotion", // "d v"
      "o": "editor::ToggleSelectedDiffHunks", // "d o"
      "shift-o": "git::ToggleStaged",
      "p": "git::Restore", // "d p"
      "u": "git::StageAndNext", // "d u"
      "shift-u": "git::UnstageAndNext" // "d shift-u"
    }
  },
  {
    "context": "vim_operator == gu",
    "bindings": {
      "g u": "vim::CurrentLine",
      "u": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gU",
    "bindings": {
      "g shift-u": "vim::CurrentLine",
      "shift-u": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == g~",
    "bindings": {
      "g ~": "vim::CurrentLine",
      "~": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == g?",
    "bindings": {
      "g ?": "vim::CurrentLine",
      "?": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gq",
    "bindings": {
      "g q": "vim::CurrentLine",
      "q": "vim::CurrentLine",
      "g w": "vim::CurrentLine",
      "w": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == y",
    "bindings": {
      "y": "vim::CurrentLine",
      "v": "vim::PushForcedMotion",
      "s": ["vim::PushAddSurrounds", {}]
    }
  },
  {
    "context": "vim_operator == ys",
    "bindings": {
      "s": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == >",
    "bindings": {
      ">": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == <",
    "bindings": {
      "<": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == eq",
    "bindings": {
      "=": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == sh",
    "bindings": {
      "!": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gc",
    "bindings": {
      "c": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gR",
    "bindings": {
      "r": "vim::CurrentLine",
      "shift-r": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == cx",
    "bindings": {
      "x": "vim::CurrentLine",
      "c": "vim::ClearExchange"
    }
  },
  {
    "context": "vim_mode == literal",
    "bindings": {
      "ctrl-@": ["vim::Literal", ["ctrl-@", "\u0000"]],
      "ctrl-a": ["vim::Literal", ["ctrl-a", "\u0001"]],
      "ctrl-b": ["vim::Literal", ["ctrl-b", "\u0002"]],
      "ctrl-c": ["vim::Literal", ["ctrl-c", "\u0003"]],
      "ctrl-d": ["vim::Literal", ["ctrl-d", "\u0004"]],
      "ctrl-e": ["vim::Literal", ["ctrl-e", "\u0005"]],
      "ctrl-f": ["vim::Literal", ["ctrl-f", "\u0006"]],
      "ctrl-g": ["vim::Literal", ["ctrl-g", "\u0007"]],
      "ctrl-h": ["vim::Literal", ["ctrl-h", "\u0008"]],
      "ctrl-i": ["vim::Literal", ["ctrl-i", "\u0009"]],
      "ctrl-j": ["vim::Literal", ["ctrl-j", "\u000A"]],
      "ctrl-k": ["vim::Literal", ["ctrl-k", "\u000B"]],
      "ctrl-l": ["vim::Literal", ["ctrl-l", "\u000C"]],
      "ctrl-m": ["vim::Literal", ["ctrl-m", "\u000D"]],
      "ctrl-n": ["vim::Literal", ["ctrl-n", "\u000E"]],
      "ctrl-o": ["vim::Literal", ["ctrl-o", "\u000F"]],
      "ctrl-p": ["vim::Literal", ["ctrl-p", "\u0010"]],
      "ctrl-q": ["vim::Literal", ["ctrl-q", "\u0011"]],
      "ctrl-r": ["vim::Literal", ["ctrl-r", "\u0012"]],
      "ctrl-s": ["vim::Literal", ["ctrl-s", "\u0013"]],
      "ctrl-t": ["vim::Literal", ["ctrl-t", "\u0014"]],
      "ctrl-u": ["vim::Literal", ["ctrl-u", "\u0015"]],
      "ctrl-v": ["vim::Literal", ["ctrl-v", "\u0016"]],
      "ctrl-w": ["vim::Literal", ["ctrl-w", "\u0017"]],
      "ctrl-x": ["vim::Literal", ["ctrl-x", "\u0018"]],
      "ctrl-y": ["vim::Literal", ["ctrl-y", "\u0019"]],
      "ctrl-z": ["vim::Literal", ["ctrl-z", "\u001A"]],
      "ctrl-[": ["vim::Literal", ["ctrl-[", "\u001B"]],
      "ctrl-\\": ["vim::Literal", ["ctrl-\\", "\u001C"]],
      "ctrl-]": ["vim::Literal", ["ctrl-]", "\u001D"]],
      "ctrl-^": ["vim::Literal", ["ctrl-^", "\u001E"]],
      "ctrl-_": ["vim::Literal", ["ctrl-_", "\u001F"]],
      "escape": ["vim::Literal", ["escape", "\u001B"]],
      "enter": ["vim::Literal", ["enter", "\u000D"]],
      "tab": ["vim::Literal", ["tab", "\u0009"]],
      // zed extensions:
      "backspace": ["vim::Literal", ["backspace", "\u0008"]],
      "delete": ["vim::Literal", ["delete", "\u007F"]]
    }
  },
  {
    "context": "BufferSearchBar && !in_replace",
    "bindings": {
      "enter": "vim::SearchSubmit",
      "escape": "buffer_search::Dismiss"
    }
  },
  {
    "context": "GitPanel || ProjectPanel || CollabPanel || OutlinePanel || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView || DebugPanel",
    "bindings": {
      // window related commands (ctrl-w X)
      "ctrl-w": null,
      "ctrl-w h": "workspace::ActivatePaneLeft",
      "ctrl-w l": "workspace::ActivatePaneRight",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-w j": "workspace::ActivatePaneDown",
      "ctrl-w shift-h": "workspace::SwapPaneLeft",
      "ctrl-w shift-l": "workspace::SwapPaneRight",
      "ctrl-w shift-k": "workspace::SwapPaneUp",
      "ctrl-w shift-j": "workspace::SwapPaneDown",
      "ctrl-w >": "vim::ResizePaneRight",
      "ctrl-w <": "vim::ResizePaneLeft",
      "ctrl-w -": "vim::ResizePaneDown",
      "ctrl-w +": "vim::ResizePaneUp",
      "ctrl-w _": "vim::MaximizePane",
      "ctrl-w =": "vim::ResetPaneSizes",
      "ctrl-w g t": "pane::ActivateNextItem",
      "ctrl-w ctrl-g t": "pane::ActivateNextItem",
      "ctrl-w g shift-t": "pane::ActivatePreviousItem",
      "ctrl-w ctrl-g shift-t": "pane::ActivatePreviousItem",
      "ctrl-w w": "workspace::ActivateNextPane",
      "ctrl-w ctrl-w": "workspace::ActivateNextPane",
      "ctrl-w p": "workspace::ActivatePreviousPane",
      "ctrl-w ctrl-p": "workspace::ActivatePreviousPane",
      "ctrl-w shift-w": "workspace::ActivatePreviousPane",
      "ctrl-w ctrl-shift-w": "workspace::ActivatePreviousPane",
      "ctrl-w ctrl-v": "pane::SplitVertical",
      "ctrl-w v": "pane::SplitVertical",
      "ctrl-w shift-s": "pane::SplitHorizontal",
      "ctrl-w ctrl-s": "pane::SplitHorizontal",
      "ctrl-w s": "pane::SplitHorizontal",
      "ctrl-w ctrl-c": "pane::CloseActiveItem",
      "ctrl-w c": "pane::CloseActiveItem",
      "ctrl-w ctrl-q": "pane::CloseActiveItem",
      "ctrl-w q": "pane::CloseActiveItem",
      "ctrl-w ctrl-a": "pane::CloseAllItems",
      "ctrl-w a": "pane::CloseAllItems",
      "ctrl-w ctrl-o": "workspace::CloseInactiveTabsAndPanes",
      "ctrl-w o": "workspace::CloseInactiveTabsAndPanes",
      "ctrl-w ctrl-n": "workspace::NewFileSplitHorizontal",
      "ctrl-w n": "workspace::NewFileSplitHorizontal"
    }
  },
  {
    "context": "ChangesList || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView || Welcome",
    "bindings": {
      ":": "command_palette::Toggle",
      "g /": "pane::DeploySearch"
    }
  },
  {
    // netrw compatibility
    "context": "ProjectPanel && not_editing",
    "bindings": {
      ":": "command_palette::Toggle",
      "%": "project_panel::NewFile",
      "/": "project_panel::NewSearchInDirectory",
      "d": "project_panel::NewDirectory",
      "enter": "project_panel::OpenPermanent",
      "escape": "project_panel::ToggleFocus",
      "h": "project_panel::CollapseSelectedEntry",
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "l": "project_panel::ExpandSelectedEntry",
      "o": "project_panel::OpenPermanent",
      "shift-d": "project_panel::Delete",
      "shift-r": "project_panel::Rename",
      "t": "project_panel::OpenPermanent",
      "v": "project_panel::OpenPermanent",
      "p": "project_panel::Open",
      "x": "project_panel::RevealInFileManager",
      "s": "project_panel::OpenWithSystem",
      "] c": "project_panel::SelectNextGitEntry",
      "[ c": "project_panel::SelectPrevGitEntry",
      "] d": "project_panel::SelectNextDiagnostic",
      "[ d": "project_panel::SelectPrevDiagnostic",
      "}": "project_panel::SelectNextDirectory",
      "{": "project_panel::SelectPrevDirectory",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst",
      "-": "project_panel::SelectParent"
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "bindings": {
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst"
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "use_key_equivalents": true,
    "bindings": {
      "k": "menu::SelectPrevious",
      "j": "menu::SelectNext",
      "g g": "menu::SelectFirst",
      "shift-g": "menu::SelectLast",
      "g f": "menu::Confirm",
      "i": "git_panel::FocusEditor",
      "x": "git::ToggleStaged",
      "shift-x": "git::StageAll",
      "shift-u": "git::UnstageAll"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      // This is identical to the binding in the base keymap, but the vim bindings above to
      // "vim::Tab" shadow it, so it needs to be bound again.
      "tab": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "os != macos && Editor && edit_prediction_conflict",
    "bindings": {
      // alt-l is provided as an alternative to tab/alt-tab. and will be displayed in the UI. This
      // is because alt-tab may not be available, as it is often used for window switching on Linux
      // and Windows.
      "alt-l": "editor::AcceptEditPrediction"
    }
  },
  {
    // Fixes https://github.com/zed-industries/zed/issues/29095 by ensuring that
    // the last binding for editor::ToggleComments is not ctrl-c.
    "context": "hack_to_fix_ctrl-c",
    "bindings": {
      "g c": "editor::ToggleComments"
    }
  }
]
