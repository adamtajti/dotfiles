{
  "arrays > declare": {
    "prefix": "arrays-declare",
    "body": ["declare -a ${1:array_var_name}=($0)"]
  },
  "arrays > pass as argument": {
    "prefix": "arrays-pass-as-argument",
    "body": [
      "declare -a additional_args=()",
      "additional_args+=(\"--platform=linux/amd64\")",
      "docker build --progress plain -t test:latest -f ./Dockerfile ./ \"\\${additional_args[@]}\""
    ]
  },
  "output > redirect stderr to stdout": {
    "prefix": "output-redirect-stderr-to-stdout",
    "body": ["2>&1"]
  },
  "output > redirect stdout to stderr": {
    "prefix": "output-redirect-stdout-to-stderr",
    "body": ["1>&2"]
  },
  "output > echo > stderr": {
    "prefix": ["echo-stderr"],
    "body": ["echo \"${1:error: message}\" >&2\n"]
  },
  "output > cat > write multiline to file (aka heredoc)": {
    "prefix": ["cat-multiline", "cat-heredoc"],
    "body": [
      "# the can't be idented except with tabs if -EOF is chosen",
      "#   nvim: <C-v> Tab can be used to insert a raw tab character",
      "cat << 'EOF' >${1:/etc/important-configuration.conf}",
      "${2:CONTENT OF THE FILE}",
      "EOF\n"
    ]
  },
  "sudo > output > cat > write multiline to file (aka heredoc)": {
    "prefix": ["sudo-cat-multiline", "sudo-cat-heredoc"],
    "body": [
      "# the can't be idented except with tabs if -EOF is chosen",
      "#   nvim: <C-v> Tab can be used to insert a raw tab character",
      "sudo tee -a \"${1:/etc/important-configuration.conf}\" > /dev/null <<EOF",
      "${2:CONTENT OF THE FILE}",
      "EOF\n"
    ]
  },
  "personal > function template": {
    "prefix": "personal-function-template",
    "body": [
      "p-${1:function-name}() { ",
      "  if [ \"\\$#\" -ne 1 ]; then",
      "    echo \"usage: p-$1 <${2:argument_name}>\" >&2",
      "    return 1",
      "  fi\n",
      "  local $2=\\$1",
      "  if [ -z \"\\$$2\" ]; then",
      "    echo \"error: $2 cannot be null or empty.\" >&2",
      "    return 1",
      "  fi\n",
      "  $0",
      "}"
    ]
  },
  "shellcheck > disable rules with a comment": {
    "prefix": "shellcheck-disable-rules",
    "body": [
      "# shellcheck disable=${1:SC2059} # ${2:explain, use commas for multiple rules in the previous placeholder}"
    ]
  },
  "if > file exists": {
    "prefix": "if-file-exists",
    "body": ["if [[ -e \"${1:file_path}\" ]]; then", "  $0", "fi"]
  },
  "if > file exists and it's regular": {
    "prefix": "if-regular-file-exists",
    "body": ["if [[ -f \"${1:file_path}\" ]]; then", "  $0", "fi"]
  },
  "if > application (executable) installed": {
    "prefix": [
      "if-installed",
      "if-application-installed",
      "if-executable-installed"
    ],
    "body": ["if command -v ${1:executable_name} then", "  $0", "fi"]
  },
  "xargs > yq": {
    "prefix": "xargs-yq-example",
    "body": [
      "find . -type f | xargs -I {} yq --front-matter extract '.tags += \"niflheim \"' {}"
    ]
  },
  "unzip > silent": {
    "prefix": "unzip-silent",
    "body": ["unzip -qq \"path-to-file.zip\""]
  },
  "go > test code coverage": {
    "prefix": "go-test-code-coverage",
    "body": [
      "go test -cover -race -covermode atomic -coverprofile=covprofile ./..."
    ]
  },
  "aws > secrets-manager > create a secret from a file": {
    "prefix": "aws-secrets-manager-create-secret-from-file",
    "body": [
      "AWS_PROFILE='${1:profile_name}' aws secretsmanager create-secret \\",
      "  --name '${2:secret_name}' \\",
      "  --description '${3:description}' \\",
      "  --secret-string 'file://${4:file_path}'\n"
    ]
  },
  "aws > ecr > docker login to a private registry": {
    "prefix": "aws-ecr-docker-login-private-registry",
    "body": [
      "aws ecr get-login-password --region ${1:us-east-1} | \\",
      "  docker login --username AWS --password-stdin \"${2:account_id}.dkr.ecr.$1.amazonaws.com\"\n"
    ]
  },
  "aws > ecr > docker login to a public registry": {
    "prefix": "aws-ecr-docker-login-public-registry",
    "body": [
      "aws ecr get-login-password --region ${1:us-east-1} | \\",
      "  docker login --username AWS --password-stdin \"public.ecr.aws/${2:public_registry_hash_or_alias}\"\n"
    ]
  },
  "nix > flake > extract version": {
    "prefix": "nix-flake-extract-version",
    "body": [
      "nix flake show . --json | jq -r '.defaultPackage.\"${1:aarch64-darwin}\".name' | cut -d'-' -f2-\n"
    ]
  },
  "nvim > execute command on startup": {
    "prefix": "nvim-execute-command-on-startup",
    "body": ["nvim -c \":execute '${1:PossessionLoad notebook}'\""]
  },
  "navigate into parent dir from script location": {
    "prefix": ["p-cd-parent-dir-from-script-location"],
    "body": ["cd \"\\$(dirname \"\\$0\")/..\" || exit 1"]
  }
}
