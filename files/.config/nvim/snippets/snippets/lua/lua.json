{
  "foreach for dictionaries": {
    "prefix": "foreach-dictionary",
    "body": ["for i, ${1:item} in pairs(${2:table}) do", "\t$0", "end"]
  },
  "foreach for arrays": {
    "prefix": "foreach-array",
    "body": ["for i, ${1:item} in ipairs(${2:array}) do", "\t$0", "end"]
  },
  "nvim > directory check": {
    "prefix": ["nvim-is-directory"],
    "body": ["vim.fn.isdirectory(${1:path}) ~= 0 $0"]
  },
  "nvim > directory check with if": {
    "prefix": ["nvim-if-is-directory"],
    "body": ["if vim.fn.isdirectory(${1:path}) ~= 0 then $0 end"]
  },
  "gsub tutorial": {
    "prefix": "gsub-tutorial",
    "body": [
      "-- Escape these characters with the % symbol: ( ) . % + - * ? [ ^ \\$",
      "replaced_text = some_text:gsub(pattern_to_replace, replace)"
    ]
  },
  "nvim > p-nvim-nui-popup-example": {
    "prefix": ["nvim-nui-example"],
    "body": [
      "local Popup = require(\"nui.popup\")",
      "local event = require(\"nui.utils.autocmd\").event",
      "local popup = Popup({",
      "	enter = true,",
      "	focusable = true,",
      "	border = {",
      "		style = \"rounded\",",
      "	},",
      "	position = \"50%\",",
      "	size = {",
      "		width = \"80%\",",
      "		height = \"60%\",",
      "	},",
      "})",
      "-- mount/open the component",
      "popup:mount()",
      "-- unmount component when cursor leaves buffer",
      "popup:on(event.BufLeave, function()",
      "	popup:unmount()",
      "end)\n",
      "local snippet_content_for_nui = utils.ensure_string_array(snippet)",
      "vim.api.nvim_buf_set_lines(popup.bufnr, 0, 1, false, snippet_content_for_nui)\n"
    ]
  },
  "nvim > command execution or eval in other terms": {
    "prefix": ["nvim-shell-command-execution", "nvim-shell-eval"],
    "body": [
      "vim.fn.jobstart('aplay /home/adamtajti/.local/share/sounds/back_001.ogg')"
    ]
  },
  "nvim > adds an autocommand": {
    "prefix": ["nvim-autocommand"],
    "body": [
      "vim.api.nvim_create_autocmd(\":help events\", {",
      "	callback = function() end,",
      "})"
    ]
  },
  "nvim > iterate open buffers": {
    "prefix": ["nvim-iterate-open-buffers"],
    "body": [
      "local buffers = vim.tbl_filter(function(buf)",
      "	return vim.api.nvim_buf_is_valid(buf) and vim.api.nvim_buf_get_option(buf, \"buflisted\")\n",
      "end, vim.api.nvim_list_bufs())",
      "for i, buffer in ipairs(buffers) do",
      "end"
    ]
  }
}
