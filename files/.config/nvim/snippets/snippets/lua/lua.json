{
  "foreach for dictionaries": {
    "prefix": ["foreach-dictionary"],
    "body": ["for i, ${1:item} in pairs(${2:table}) do", "\t$0", "end"]
  },
  "foreach for arrays": {
    "prefix": ["foreach-array"],
    "body": ["for i, ${1:item} in ipairs(${2:array}) do", "\t$0", "end"]
  },
  "nvim > directory check": {
    "prefix": ["nvim-is-directory"],
    "body": ["vim.fn.isdirectory(${1:path}) ~= 0 $0"]
  },
  "nvim > directory check with if": {
    "prefix": ["nvim-if-is-directory"],
    "body": ["if vim.fn.isdirectory(${1:path}) ~= 0 then $0 end"]
  },
  "gsub tutorial": {
    "prefix": ["gsub-tutorial"],
    "body": [
      "-- Escape these characters with the % symbol: ( ) . % + - * ? [ ^ \\$",
      "replaced_text = some_text:gsub(pattern_to_replace, replace)"
    ]
  },
  "nvim > p-nvim-nui-popup-example": {
    "prefix": ["nvim-nui-example"],
    "body": [
      "local Popup = require(\"nui.popup\")",
      "local event = require(\"nui.utils.autocmd\").event",
      "local popup = Popup({",
      "	enter = true,",
      "	focusable = true,",
      "	border = {",
      "		style = \"rounded\",",
      "	},",
      "	position = \"50%\",",
      "	size = {",
      "		width = \"80%\",",
      "		height = \"60%\",",
      "	},",
      "})",
      "-- mount/open the component",
      "popup:mount()",
      "-- unmount component when cursor leaves buffer",
      "popup:on(event.BufLeave, function()",
      "	popup:unmount()",
      "end)\n",
      "local snippet_content_for_nui = utils.ensure_string_array(snippet)",
      "vim.api.nvim_buf_set_lines(popup.bufnr, 0, 1, false, snippet_content_for_nui)\n"
    ]
  },
  "nvim > command execution or eval in other terms": {
    "prefix": ["nvim-shell-command-execution", "nvim-shell-eval"],
    "body": [
      "vim.fn.jobstart('aplay /home/adamtajti/.local/share/sounds/back_001.ogg')"
    ]
  },
  "nvim > adds an autocommand": {
    "prefix": ["nvim-autocommand"],
    "body": [
      "vim.api.nvim_create_autocmd(\":help events\", {",
      "	callback = function() end,",
      "})"
    ]
  },
  "nvim > iterate open buffers": {
    "prefix": ["nvim-iterate-open-buffers"],
    "body": [
      "local buffers = vim.tbl_filter(function(buf)",
      "	return vim.api.nvim_buf_is_valid(buf) and vim.api.nvim_buf_get_option(buf, \"buflisted\")\n",
      "end, vim.api.nvim_list_bufs())",
      "for i, buffer in ipairs(buffers) do",
      "end"
    ]
  },
  "nvim > async input (prompt) handling": {
    "prefix": ["nvim-ui"],
    "body": [
      "vim.ui.input({ prompt = \"snippet prefix: \" }, function(input)",
      "	if input == nil or input == \"\" then",
      "		print(\"input nil or empty, esc\")",
      "		return",
      "	end",
      "end)"
    ]
  },
  "nvim > An example to detect if the cursor is in a TreeSitter nodes (comments)": {
    "prefix": ["nvim-treesitter-node-detection-example"],
    "body": [
      " -- Use :InspectTree to figure out the node types",
      " local success, node = pcall(vim.treesitter.get_node)",
      " if",
      "   success",
      "   and node",
      "   and vim.tbl_contains(",
      "     { \"comment\", \"line_comment\", \"block_comment\" },",
      "     node:type()",
      "   )",
      " then",
      "end"
    ]
  },
  "nvim > detects a filetype": {
    "prefix": ["nvim-detect-filetype"],
    "body": ["if vim.bo.filetype == \"${1:filetype}\" then", "end"]
  },
  "Prepends an element to table": {
    "prefix": ["prepend"],
    "body": ["table.insert(${1:list}, 1, ${2:value})"]
  },
  "Checks if a table is an array": {
    "prefix": ["is_array"],
    "body": [
      "local function is_array(t)",
      "  local i = 0",
      "  for _ in pairs(t) do",
      "      i = i + 1",
      "      if t[i] == nil then return false end",
      "  end",
      "  return true",
      "end"
    ]
  },
  "nvim > Checks if a table is an array": {
    "prefix": ["nvim-is-array"],
    "body": [
      "local function is_array(t)",
      "  if vim.fn.has 'nvim-0.11' == 1 then",
      "    return vim.islist(t)",
      "  else",
      "    return vim.tbl_islist(t)",
      "  end",
      "end"
    ]
  },
  "Gets the cwd": {
    "prefix": ["nvim-cwd"],
    "body": ["            dir = vim.fn.getcwd()"]
  }
}
